#!/usr/bin/env bash
# ----------------------------------------------------------------------------------------------------------------------
# <project name>, copyright 2020.
# A convenience wrapper around `cmake` and `make`.
# ----------------------------------------------------------------------------------------------------------------------
set -e -o pipefail

# Constants:
HERE="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VARCACHE_FILE="${HERE}/.buildcache"
VARCACHE_VERSION=2
VARCACHE_INVALID=false

# Arguments:
INVOKE=main_project_build
OPT_RECONFIGURE=false
OPT_LINT=true
OPT_PROFILE=""
OPT_TOOLCHAIN=""
OPT_CORES="$(nproc 2>/dev/null || true)"
CMAKE_ARGS=()
MAKE_ARGS=()

# Cache:
if [[ -f "$VARCACHE_FILE" ]]; then source "$VARCACHE_FILE" || VARCACHE_INVALID=1; fi

# ----------------------------------------------------------------------------------------------------------------------
# Functions:

msg_status() {
	printf "\x2D\x2D %s %s\n" "$1"
}

msg_err() {
	printf "\x1B[31m%s: %s\x1B[0m\n" "$0" "$1" >&2
}

invalidate() {
	if [[ "$#" -eq 0 ]] || "$@"; then
		VARCACHE_INVALID=true
	fi
}

add_cmake_arg() {
	CMAKE_ARGS+=("$1")
	if ! [[ "$1" =~ =.*$ || "$2" =~ ^- ]]; then
		if [[ -n "$2" ]]; then
			CMAKE_ARGS+=("$2")
			return 1
		fi
	fi
}

add_make_arg() {
	MAKE_ARGS+=("$1")
}

# ----------------------------------------------------------------------------------------------------------------------
# Arguments:

while [[ "$#" -gt 0 ]]; do
	arg_name="$(cut -d'=' -f1 <<< "$1")"
	arg_value="$(cut -d'=' -f2- <<< "$1")"

	case "$arg_name" in
		"--dev")          invalidate; OPT_BUILD_DIR="dev";;
		"--reconfigure")  invalidate; OPT_RECONFIGURE=true;;
		"--release")      invalidate [ "$OPT_PROFILE" != release ]; OPT_PROFILE=release;;
		"--debug")        invalidate [ "$OPT_PROFILE" != debug   ]; OPT_PROFILE=debug;;
		"--toolchain")    invalidate [ "$OPT_TOOLCHAIN" != "$arg_value" ]; OPT_TOOLCHAIN="$arg_value";;
		"--no-lint")      invalidate [ "$OPT_LINT" = "true" ]; OPT_LINT=false;;
		"--lint")         invalidate [ "$OPT_LINT" = "false" ]; OPT_LINT=true;;
		"--print-info")   INVOKE="main_project_info"; msg_status() { :; };;
		"--help")         INVOKE="main_help";         msg_status() { :; };;
    "--cores")        OPT_CORES="$arg_value";;
		-*)               invalidate; add_cmake_arg "$1" "$2" || shift;;
		*)                add_make_arg "$1";;
	esac
	shift || true
done

# ----------------------------------------------------------------------------------------------------------------------
# Initialization:

# Check for cmake support.
if ! type "cmake" &>/dev/null; then
	msg_err "cmake was not found"
	exit 2
fi

# Handle reconfiguration option.
if "$OPT_RECONFIGURE" && [[ -n "$BUILD_DIR" && -f "${BUILD_DIR}/CMakeCache.txt" ]]; then
	rm "${BUILD_DIR}/CMakeCache.txt"
	if [[ -f "$VARCACHE_FILE" ]]; then
		rm "$VARCACHE_FILE"
	fi
fi

# Handle cores option.
if [[ -n "$OPT_CORES" ]]; then
  add_make_arg "-j${OPT_CORES}"
fi

# Handle toolchain option.
if [[ -n "$OPT_TOOLCHAIN" ]]; then
	add_cmake_arg "-DCMAKE_TOOLCHAIN_FILE=${OPT_TOOLCHAIN}"
fi

# Handle lint option.
if [[ "$OPT_LINT" = "false" ]]; then
  add_cmake_arg "-DAREPA_SKIP_LINTING=true"
fi

# Handle debug/release options.
case "$OPT_PROFILE" in
	"debug")      add_cmake_arg "-DCMAKE_BUILD_TYPE=Debug";;
	"release"|"") add_cmake_arg "-DCMAKE_BUILD_TYPE=Release";;
esac

# ----------------------------------------------------------------------------------------------------------------------
# Detect build information:
if "$VARCACHE_INVALID" || [[ "$VARCACHE_VERSION" != "$EXPECTED_VARCACHE_VERSION" || "$HERE" != "$PROJECT_DIR" ]]; then
	if "$VARCACHE_INVALID";                     then msg_status "An argument has changed the build settings.";
	elif [[ -z "$EXPECTED_VARCACHE_VERSION" ]]; then msg_status "This is the first time building the project.";
	fi

	msg_status "Detecting build information..."
	echo "# Autogenerated file. DO NOT EDIT"                        > "$VARCACHE_FILE"
	"${HERE}/scripts/build/query_project_info.sh"                   >> "$VARCACHE_FILE"
	"${HERE}/scripts/build/query_build_info.sh" "${CMAKE_ARGS[@]}"  >> "$VARCACHE_FILE"

	source "$VARCACHE_FILE"

  if [[ -n "$OPT_BUILD_DIR" && "$OPT_BUILD_DIR" != "." ]]; then
    BUILD_DIR="${HERE}/target/$OPT_BUILD_DIR"
  else
    BUILD_DIR="$(sed "s/{{system}}/${SYSTEM_STRING}/; s/{{type}}/${OPT_PROFILE}/" <<< "$PROJECT_TARGET_DIR")"
  fi

	printf "%s=%q\n" \
		EXPECTED_VARCACHE_VERSION "$VARCACHE_VERSION" \
		BUILD_DIR                 "$BUILD_DIR" \
		OPT_PROFILE               "$OPT_PROFILE" \
		OPT_TOOLCHAIN             "$OPT_TOOLCHAIN" \
		OPT_LINT                  "$OPT_LINT" \
		>> "$VARCACHE_FILE"

	source "$VARCACHE_FILE"
fi

# ----------------------------------------------------------------------------------------------------------------------
# Main Functions:

main_project_info() {
	printf "\x1B[34mProject Configuration:\x1B[0m\n"
	printf "\x1B[33m%-20s\x1B[35m:\x1B[0m %s\n" \
		"Name"      "$PROJECT_NAME" \
		"Directory" "$PROJECT_DIR"

	printf "\n\x1B[34mBuild Configuration:\x1B[0m\n"
	printf "\x1B[33m%-20s\x1B[35m:\x1B[0m %s\n" \
		"Directory" "$BUILD_DIR" \
		"Target"    "$SYSTEM_STRING" \
		"Profile"   "$OPT_PROFILE" \
		"Linting?"  "$OPT_LINT"

	printf "\n\x1B[34mCommands:\x1B[0m\n"
	printf "\x1B[33m%-18s \x1B[35m=> \x1B[0m%s\n" \
		"cmake" "cmake ${CMAKE_ARGS[*]}" \
		"make"  "${BUILD_COMMAND+make} ${MAKE_ARGS[*]}"
}

main_help() {
	if command -v 'open' &>/dev/null; then
		open "${PROJECT_DIR}/README.md"
	else
		echo "Check out README.md for instructions."
	fi
}

main_project_build() {
  [[ -d "${BUILD_DIR}" ]] || mkdir -p "$BUILD_DIR"
  cd "$BUILD_DIR"

	# Configure project:
	if ! [[ -f "${BUILD_DIR}/CMakeCache.txt" ]]; then
		cmake "${CMAKE_ARGS[@]}" "${PROJECT_DIR}" || exit $?
	fi

	# Make project:
	[[ -n "$BUILD_COMMAND" ]] || BUILD_COMMAND="make"
	exec "$BUILD_COMMAND" "${MAKE_ARGS[@]}"
}


# ----------------------------------------------------------------------------------------------------------------------
# Main:

"$INVOKE"
exit $?
